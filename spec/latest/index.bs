<pre class='metadata'>
Title: Binary Sparse Format Specification
Shortname: binsparse
Level: 1
Status: LS-COMMIT
Status: w3c/UD
Group: GraphBLAS
URL: http://example.com/url-this-spec-will-live-at
Repository: https://github.com/GraphBLAS/binsparse-specification
Editor: Benjamin Brock, Intel
Editor: Tim Davis, Texas A&M
Editor: Jim Kitchen, Anaconda
Editor: Erik Welch, NVIDIA
Editor: Isaac Virshup, Helmholtz Munich
Editor: Willow Ahrens, MIT
Abstract: A cross-platform binary storage format for sparse data, particularly sparse matrices.
Markup Shorthands: css no, markdown yes
</pre>

Introduction {#intro}
=====================

The Binsparse Specification (name tentative) provides a cross-platform format
for efficiently storing data, particularly sparse multidimensional arrays, in
binary format. Binsparse is designed to be both a standalone and embeddable
format.  It consists of two parts:

- a JSON *descriptor* detailing the structure of the chosen binary storage format
- one or more *binary arrays*, each stored under a predefined dataset name based
    on the format

Both the descriptor and binary arrays are stored in a supported *binary container*.

Definitions {#defs}
===================

Binsparse is intended to support multidimensional *sparse arrays*, meaning arrays
in which not every location has a value.  We refer to each location in the array
with a value as a *stored value*.  Stored values have associated with them a
*scalar value*, which is the value stored in that location in the array, and one
or more *indices*, which describe the location where the stored value is located
in the array. Some or all of these indices may be stored explicitly, or they may
be implicitly derived, depending on storage format.  When stored explicitly,
indices are 0-based positive integers. 


Binsparse JSON Descriptors {#descriptor}
========================================

Binsparse descriptors are JSON blobs that describe the binary format of sparse
data.  The JSON blob includes several required keys that describe the structure of
the binary storage. Optional attributes may be defined to hold additional metadata.

<div class=example>

Example of a JSON descriptor for a compressed-sparse column matrix with 10 rows
and 12 columns, containing float32 values, along with user-defined attributes.

```json
{
  "format": "CSC",
  "shape": [10, 12],
  "data_types": {
    "pointers_0": "uint64",
    "indices_1": "uint64",
    "values": "float32"
  },
  "attrs": {
    "original_source": "https://url/of/original/file.mtx",
    "author": "John Doe"
  }
}
```

</div>

Shape {#key_shape}
------------------

The `shape` key must be present and shall define the shape of the sparse tensor.
It shall contain a JSON array of integers, with index `i` containing the size of
the `i`'th dimension. For matrices, index `0` shall contain the number of rows,
and index `1` shall contain the number of columns. For vectors, index `0` shall
contain the vector's dimension.

Note: a matrix has shape [`number_of_rows`, `number_of_columns`] regardless of whether
the format orientation is row-wise or column-wise.


Format {#key_format}
--------------------

The `format` key must be present and shall describe the binary storage format
of dense arrays used to represent the sparse array. The format
defined by the `format` key determines the named binary arrays that shall exist
in the binary storage container.

### Pre-defined Formats ### {#predefined_formats}

The following is a list of all pre-defined formats and the arrays that shall
be present in the binary container.  `number_of_elements` refers to the number
of stored values, `number_of_rows` refers to the number of rows, and `number_of_columns`
refers to the number of columns.

#### VEC #### {#vec_format}

Vector format

: indices_0
:: Array of size `number_of_elements` containing indices.
: values
:: Array of size `number_of_elements` containing stored values.

The element of the vector located at index `indices_0[i]` has scalar value
`values[i]`.  Elements shall be sorted by index and must not be duplicated.

#### CSR #### {#csr_format}

Compressed-Sparse Row format

: pointers_0
:: Array of size `number_of_rows + 1` containing start and end positions by row.
: indices_1
:: Array of size `number_of_elements` containing 0-based column indices.
: values
:: Array of size `number_of_elements` containing stored values.

The column indices of the stored values located in row `i` are located in the range
`[pointers_0[i], pointers_0[i+1])` in the `indices_1` array. The scalar values for
each of those stored values is stored in the corresponding index in the `values` array.

Within a row, elements shall be sorted by column index and must not be duplicated.

#### CSC #### {#csc_format}

Compressed-Sparse Column format

: pointers_0
:: Array of size `number_of_columns + 1` containing start and end positions by column.
: indices_1
:: Array of size `number_of_elements` containing 0-based row indices.
: values
:: Array of size `number_of_elements` containing stored values.

The rows indices of the stored values located in column `j` are located in the range
`[pointers_0[j], pointers_0[j+1])` in the `indices_1` array. The scalar values for
each of those stored values is stored in the corresponding index in the `values` array.

Within a column, elements shall be sorted by row index and must not be duplicated.

#### DCSR #### {#dcsr_format}

Doubly Compressed-Sparse Row format

: indices_0
:: Array of size `number_of_nonempty_rows` containing 0-based row indices corresponding
      to positions within `pointers_0`.
: pointers_0
:: Array of size `number_of_nonempty_rows + 1` containing start and end positions.
: indices_1
:: Array of size `number_of_elements` containing 0-based column indices.
: values
:: Array of size `number_of_elements` containing stored values.

DCSR is similar to CSR, except that rows which are entirely empty are not stored. `pointers_0`
contains no repeated values. Because the position within `pointers_0` no longer dictates the
corresponding row index, `indices_0` provides the row index.

Rows shall be sorted and must not be duplicated.
Within each row, elements shall be sorted by column index and must not be duplicated.

#### DCSC #### {#dcsc_format}

Doubly Compressed-Sparse Column format

: indices_0
:: Array of size `number_of_nonempty_columns` containing 0-based column indices
      corresponding to positions within `pointers_0`.
: pointers_0
:: Array of size `number_of_nonempty_columns + 1` containing start and end positions.
: indices_1
:: Array of size `number_of_elements` containing 0-based row indices.
: values
:: Array of size `number_of_elements` containing stored values.

DCSC is similar to CSC, except that columns which are entirely empty are not stored. `pointers_0`
contains no repeated values. Because the position within `pointers_0` no longer dictates the
corresponding column index, `indices_0` provides the column index.

Columns shall be sorted and not duplicated.
Within each column, elements shall be sorted by row index and must not be duplicated.

#### COOR #### {#coor_format}

Row-wise Coordinate format

: indices_0
:: Array of size `number_of_elements` containing 0-based row indices.
: indices_1
:: Array of size `number_of_elements` containing 0-based column indices.
: values
:: Array of size `number_of_elements` containing stored values.

Pairs of (row index, column index) shall be sorted first by row and then by column.
Pairs must not be duplicated.

#### COOC #### {#cooc_format}

Column-wise Coordinate format

: indices_0
:: Array of size `number_of_elements` containing 0-based column indices.
: indices_1
:: Array of size `number_of_elements` containing 0-based row indices.
: values
:: Array of size `number_of_elements` containing stored values.

Pairs of (column index, row index) shall be sorted first by column and then by row.
Pairs must not be duplicated.

#### COO #### {#coo_format}

Coordinate format is an alias for [[#coor_format]] format.

Data Types {#key_data_types}
----------------------------

The `data_types` key must be present and shall define the data types of all required
arrays based on the [[#key_format]]. The data type declares the type of the
in-memory arrays. While these are often identical to the types used when storing
the arrays on disk in the container, the container may choose to store the arrays
in another format. For example, `uint64` type may be stored as `int8` if all the
numbers in the array are small enough to fit, but `data_types` would still list the
array as having type `uint64`.

For a given [[#key_format]], all named binary arrays for that format shall have a
corresponding name in `data_types`.

### Sparse Array with All Values the Same ### {#iso_arrays}

When all values of a sparse array are the same identical value, a special syntax is
provided to compress the value array to a single value rather than duplicating the same
number unnecessarily. The type is written as `1x[<type>]` to indicate that the array
will store only a single element which is common to all stored indices.

<div class=example>

Example of a CSR Matrix whose values are all 1.

<table>
  <thead>
  <tr>
    <th> </th>
    <th>0</th>
    <th>1</th>
    <th>2</th>
    <th>3</th>
    <th>4</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <th>0</th>
    <td>.</td>
    <td>.</td>
    <td>.</td>
    <td>1</td>
    <td>.</td>
  </tr>
  <tr>
    <th>1</th>
    <td>.</td>
    <td>1</td>
    <td>.</td>
    <td>.</td>
    <td>1</td>
  </tr>
  <tr>
    <th>2</th>
    <td>.</td>
    <td>.</td>
    <td>.</td>
    <td>.</td>
    <td>.</td>
  </tr>
  <tr>
    <th>3</th>
    <td>.</td>
    <td>1</td>
    <td>1</td>
    <td>.</td>
    <td>.</td>
  </tr>
  <tr>
    <th>4</th>
    <td>.</td>
    <td>.</td>
    <td>.</td>
    <td>1</td>
    <td>.</td>
  </tr>
  </tbody>
</table>

```json
{
  "format": "CSR",
  "shape": [5, 5],
  "data_types": {
    "pointers_0": "uint64",
    "indices_1": "uint64",
    "values": "1x[int8]"
  }
}
```

- `pointers_0` = [0, 1, 3, 3, 5, 6]
- `indices_1` = [3, 1, 4, 1, 2, 3]
- `values` = [1]

</div>

Note: Structure-only matrices (allowed in matrix market format) can be stored
      using this technique with a value of 1. This adds only a small amount of
      overhead while describing essentially the same matrix.


Binary Containers {#binary_container}
=====================================
Binary containers must store binary arrays in a standardized, cross-platform
manner, using the corresponding dataset names previously defined.

Supported Binary Containers {#supported_containers}
---------------------------------------------------

Currently supported binary containers include HDF5 and NetCDF (but should include more).

